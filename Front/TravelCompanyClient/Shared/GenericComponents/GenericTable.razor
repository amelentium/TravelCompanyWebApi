@typeparam TEntity

@inject HttpClient _httpClient
@inject NavigationManager uriHelper
@inject IJSRuntime js

<h3>@typeof(TEntity).Name.Replace("DTO", "").Replace("Output", "")</h3>
<div class="form-group">
    <a class="btn btn-success" href="@Page/create"><i class="oi oi-plus"></i>New</a>
</div>
<br>
@if (loading && data == null)
{
    <text>Loading...</text>
}
else if (data == null)
{
    <text>Data fetching error.</text>
}
else if (data.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                @foreach (var field in data[0].GetType().GetProperties())
                {
                    @if (data[0].GetType() == typeof(DiscountDTO) && field.Name == "Value")
                    {
                        <th>@($"{field.Name} (%)")</th>
                    }
                    else if (field.Name == "Duration")
                    {
                        <th>@($"{field.Name} (Days)")</th>
                    }
                    else
                    {
                        <th>@field.Name</th>
                    }
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (TEntity entity in data)
            {
                <tr>
                    @foreach (var field in entity.GetType().GetProperties())
                    {
                        <td>@field.GetValue(entity, null)</td>
                    }
                    <td>
                        <a class="btn btn-success" href="@Page/edit/@entity.GetType().GetProperty("Id").GetValue(entity, null).ToString()">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(@entity.GetType().GetProperty("Id").GetValue(entity, null).ToString()))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string Url { get; set; }

    [Parameter]
    public string Page { get; set; }

    TEntity[] data { get; set; }

    bool loading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            data = await _httpClient.GetFromJsonAsync<TEntity[]>(Url);
        }
        catch (Exception e)
        {
            await js.InvokeVoidAsync("console.log", e.Message);

            await js.InvokeVoidAsync("window.localStorage.clear");
        }
        finally 
        {
            loading = false;
        }
    }

    async Task Delete(string Id)
    {
        var entity = data.First(x => x.GetType().GetProperty("Id").GetValue(x, null).ToString() == Id);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete record {entity.GetType().GetProperty("Id").GetValue(entity, null)}?"))
        {
            await _httpClient.DeleteAsync($"{Url}/{Id}");
            await OnInitializedAsync();
        }
    }
}
