@inject HttpClient _httpClient
@inject NavigationManager uriHelper
@inject IJSRuntime js

<h3>LogIn</h3>
<EditForm Model="@logIn" OnValidSubmit="@LogIn">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Name:</label>
        <div>
            <InputText @bind-Value="@logIn.Name" />
            <ValidationMessage For="@(() => logIn.Name)" />
        </div>
        <label>Password:</label>
        <div>
            <InputText @bind-Value="@logIn.Pass" />
            <ValidationMessage For="@(() => logIn.Pass)" />
        </div>
    </div>
    <button type="submit" class="btn btn-success">
        LogIn
    </button>
</EditForm>

@code {
    LogIn logIn { get; set; } = new LogIn();

    async Task LogIn()
    {
        var response = await _httpClient.PostAsJsonAsync("https://localhost:44307/login", logIn);

        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await js.InvokeVoidAsync("localStorage.setItem", "TravelCompanyToken", token);

            if (_httpClient.DefaultRequestHeaders.Any(x => x.Key == "Authorization"))
                _httpClient.DefaultRequestHeaders.Remove("Authorization");

            _httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

            uriHelper.NavigateTo("/", forceLoad: true);
        }
        else await js.InvokeVoidAsync("alert", "Invalid login or password inputed");
    }
}
