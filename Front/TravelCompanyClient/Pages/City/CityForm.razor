@inject HttpClient _httpClient
@inject IJSRuntime js

@if (countries == null)
{
    <text>Loading...</text>
}
else if (countries.Count() == 0)
{
    <text>No avaible records found.</text>
}
else
{
    <EditForm Model="@city" OnValidSubmit="@OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Climate:</label>
            <div>
                <InputSelect @bind-Value="@city.Climate">
                    <option></option>
                    @foreach (var climate in Enum.GetValues(typeof(Climate)))
                        {
                        <option value="@climate">@climate</option>
                        }
                </InputSelect>
            </div>
            <label>Country:</label>
            <div>
                <InputSelect @bind-Value="@city.CountryId">
                    <option></option>
                    @foreach (var country in countries)
                        {
                        <option value="@country.Id">@country.Name</option>
                        }
                </InputSelect>
            </div>
            <label>Name:</label>
            <div>
                <InputText @bind-Value="@city.Name" />
                <ValidationMessage For="@(() => city.Name)" />
            </div>
        </div>
        <button type="submit" class="btn btn-success">
            @ButtonText
        </button>
        <a class="btn btn-secondary" href="/cities">Back</a>
    </EditForm>
}

@code {
    [Parameter] public CityDTO city { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private List<CountryDTO> countries = new();

    protected override async Task OnInitializedAsync()
    {
        countries = await _httpClient.GetFromJsonAsync<List<CountryDTO>>("https://localhost:44445/Countries");
    }
}
