// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TravelCompany.Infrastructure.Migrations
{
    [DbContext(typeof(TravelCompanyContext))]
    [Migration("20220528114956_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("TravelCompany.Domain.Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Climate")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double?>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Stars")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Pass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("REAL");

                    b.Property<double?>("FullPrice")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasPrecision(0)
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotalDiscount")
                        .HasColumnType("REAL");

                    b.Property<int?>("TourId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TourId");

                    b.ToTable("Passes");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.PassDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PassId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("PassId");

                    b.ToTable("PassDiscounts");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte?>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HotelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.City", b =>
                {
                    b.HasOne("TravelCompany.Domain.Entity.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Cities_Countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Hotel", b =>
                {
                    b.HasOne("TravelCompany.Domain.Entity.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Hotels_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Pass", b =>
                {
                    b.HasOne("TravelCompany.Domain.Entity.Client", "Client")
                        .WithMany("Passes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Passes_Clients");

                    b.HasOne("TravelCompany.Domain.Entity.Tour", "Tour")
                        .WithMany("Passes")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Passes_Tours");

                    b.Navigation("Client");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.PassDiscount", b =>
                {
                    b.HasOne("TravelCompany.Domain.Entity.Discount", "Discount")
                        .WithMany("PassDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_PassDiscounts_Discounts");

                    b.HasOne("TravelCompany.Domain.Entity.Pass", "Pass")
                        .WithMany("PassDiscounts")
                        .HasForeignKey("PassId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_PassDiscounts_Passes");

                    b.Navigation("Discount");

                    b.Navigation("Pass");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Tour", b =>
                {
                    b.HasOne("TravelCompany.Domain.Entity.Hotel", "Hotel")
                        .WithMany("Tours")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Tours_Hotels");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Client", b =>
                {
                    b.Navigation("Passes");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Discount", b =>
                {
                    b.Navigation("PassDiscounts");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Hotel", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Pass", b =>
                {
                    b.Navigation("PassDiscounts");
                });

            modelBuilder.Entity("TravelCompany.Domain.Entity.Tour", b =>
                {
                    b.Navigation("Passes");
                });
#pragma warning restore 612, 618
        }
    }
}
