@typeparam TEntity

@inject HttpClient _httpClient
@inject IJSRuntime js

<h3>Вata</h3>
<div class="form-group">
    <a class="btn btn-success" href="clients/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>
@if (data == null)
{
    <text>Loading...</text>
}
else if (data.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                @foreach (var field in data[0].GetType().GetProperties())
                {
                    <td>@field.Name</td>
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (TEntity entity in data)
            {
            <tr>
                @foreach (var field in entity.GetType().GetProperties())
                {
                    <td>@field.GetValue(entity, null)</td>
                }
                <td>
                    <a class="btn btn-success" href="@Page/edit/@entity.GetType().GetProperty("Id").GetValue(entity, null).ToString()">Edit</a>
                    <button class="btn btn-danger" @onclick="@(() => Delete(@entity.GetType().GetProperty("Id").GetValue(entity, null).ToString()))">Delete</button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string Url { get; set; }

    [Parameter]
    public string Page { get; set; }

    TEntity[] data { get; set; }

    protected override async Task OnInitializedAsync()
    {
        data = await _httpClient.GetFromJsonAsync<TEntity[]>(Url);
    }

    async Task Delete(string Id)
    {
        var entity = data.First(x => x.GetType().GetProperty("Id").GetValue(x, null).ToString() == Id);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete record {entity.GetType().GetProperty("Id").GetValue(entity, null)}?"))
        {
            await _httpClient.DeleteAsync($"{Page}/{Id}");
            await OnInitializedAsync();
        }
    }
}
