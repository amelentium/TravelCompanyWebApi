@inject HttpClient _httpClient

@if (hotels == null)
{
    <text>Loading...</text>
}
else if (hotels.Count == 0)
{
    <text>No avaible records found.</text>
}
else
{
    <EditForm Model="@tour" OnValidSubmit="@OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Hotel:</label>
            <div>
                <InputSelect @bind-Value="@tour.HotelId">
                    <option></option>
                    @foreach (var hotel in hotels)
                    {
                        <option value="@hotel.Id">@hotel.Name</option>
                    }
                </InputSelect>
            </div>
            <label>Duration (Weeks):</label>
            <div>
                <InputNumber @bind-Value="@tour.Duration" />
                <ValidationMessage For="@(() => tour.Duration)" />
            </div>
            <label>Price:</label>
            <div>
                <InputNumber @bind-Value="@tour.Price" />
                <ValidationMessage For="@(() => tour.Price)" />
            </div>
            <label>Description:</label>
            <div>
                <InputText @bind-Value="@tour.Description" />
                <ValidationMessage For="@(() => tour.Description)" />
            </div>
        </div>
        <button type="submit" class="btn btn-success">
            @ButtonText
        </button>
        <a class="btn btn-secondary" href="/tours">Back</a>
    </EditForm>
}

@code {
    [Parameter] public TourDTO tour { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    
    private List<HotelDTO> hotels;

    protected override async Task OnInitializedAsync()
    {
        hotels = await _httpClient.GetFromJsonAsync<List<HotelDTO>>("https://localhost:44378/Hotels");
    }
}

